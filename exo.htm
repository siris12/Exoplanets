<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Exoplanet Educational App</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            font-family: Arial, sans-serif;
            color: white;
        }
        canvas {
            display: block;
        }
        #sidebar {
            position: absolute;
            top: 0;
            left: 0;
            width: 200px;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            padding: 10px;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.5);
            z-index: 10;
        }
        #sidebar h2 {
            margin: 0;
            font-size: 20px;
            text-align: center;
        }
        #sidebar button {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            background-color: #444;
            border: none;
            color: white;
            cursor: pointer;
            border-radius: 5px;
        }
        #sidebar button:hover {
            background-color: #555;
        }
        #infoPanel {
            position: absolute;
            top: 20px;
            left: 220px;
            width: calc(100% - 240px);
            max-width: 600px;
            background-color: rgba(0, 0, 0, 0.8);
            padding: 15px;
            border-radius: 10px;
            display: none; /* Hidden by default */
            color: white;
        }
        #infoPanel h3 {
            margin: 0;
        }
        #infoPanel button {
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div id="sidebar">
        <h2>Exoplanets</h2>
    </div>
    <div id="infoPanel">
        <h3 id="exoplanetName"></h3>
        <p id="exoplanetDescription"></p>
        <button onclick="closeInfo()">Close</button>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/controls/OrbitControls.js"></script>
    <script>
        // Scene setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // OrbitControls for zooming and moving with the cursor
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.25;

        // Array of exoplanets with RA, Dec, and distance from the Sun in light years
        const exoplanets = [
            { name: "Proxima Centauri b", ra: 185.1787793, dec: 17.7932516, dist: 4.24 },
            { name: "TRAPPIST-1e", ra: 39.5, dec: -5.0, dist: 39.5 },
            { name: "Kepler-186f", ra: 500, dec: 0, dist: 500 },
            { name: "LHS 1140 b", ra: 40, dec: 0, dist: 40 },
            { name: "HD 209458 b", ra: 160, dec: 0, dist: 160 },
            { name: "WASP-121b", ra: 370, dec: 0, dist: 370 },
            { name: "K2-18b", ra: 124, dec: 0, dist: 124 },
            { name: "WASP-43b", ra: 260, dec: 0, dist: 260 }
        ];

        // Create stars
        const starsGeometry = new THREE.BufferGeometry();
        const starCount = 1000;
        const positionArray = new Float32Array(starCount * 3); 

        for (let i = 0; i < starCount; i++) {
            const x = (Math.random() - 0.5) * 2000; 
            const y = (Math.random() - 0.5) * 2000; 
            const z = (Math.random() - 0.5) * 2000; 
            positionArray.set([x, y, z], i * 3);
        }

        starsGeometry.setAttribute('position', new THREE.BufferAttribute(positionArray, 3));
        const starsMaterial = new THREE.PointsMaterial({ color: 0xffffff, size: 2 });
        const stars = new THREE.Points(starsGeometry, starsMaterial);
        scene.add(stars);

        // Create a sphere to represent the Sun
        const sunGeometry = new THREE.SphereGeometry(20, 32, 32);
        const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00 });
        const sun = new THREE.Mesh(sunGeometry, sunMaterial);
        scene.add(sun);

        // Function to convert RA/Dec to 3D coordinates
        function convertRADecTo3D(ra, dec, dist) {
            const radius = dist * 10; // Scale down for visualization
            const phi = (90 - dec) * (Math.PI / 180); // Convert to radians
            const theta = (ra + 180) * (Math.PI / 180); // Convert to radians

            const x = radius * Math.sin(phi) * Math.cos(theta);
            const y = radius * Math.sin(phi) * Math.sin(theta);
            const z = radius * Math.cos(phi);

            return new THREE.Vector3(x, y, z);
        }

        // Generate exoplanets in the scene
        exoplanets.forEach(exoplanet => {
            const position = convertRADecTo3D(exoplanet.ra, exoplanet.dec, exoplanet.dist);
            const exoplanetMarker = new THREE.Mesh(new THREE.SphereGeometry(5, 32, 32), new THREE.MeshBasicMaterial({ color: 0xff0000 }));

            exoplanetMarker.position.copy(position);
            scene.add(exoplanetMarker);

            // Create button to show info
            const button = document.createElement('button');
            button.innerText = exoplanet.name;
            button.onclick = () => showInfo(exoplanet.name, exoplanet.dist);
            document.getElementById('sidebar').appendChild(button);
        });

        // Show information for selected exoplanet
        function showInfo(exoplanetName, distance) {
            document.getElementById('exoplanetName').innerText = exoplanetName;
            document.getElementById('exoplanetDescription').innerText = `Distance from Sun: ${distance} light years.`;
            document.getElementById('infoPanel').style.display = 'block'; // Show the panel
        }

        // Close information panel
        function closeInfo() {
            document.getElementById('infoPanel').style.display = 'none'; // Hide the panel
        }

        // Camera position
        camera.position.z = 500;

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            controls.update(); // Update the controls
            stars.rotation.x += 0.001; 
            stars.rotation.y += 0.001;
            renderer.render(scene, camera);
        }

        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        // Start animation
        animate();
    </script>
</body>
</html>